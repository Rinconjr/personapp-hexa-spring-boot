# Usamos una imagen base de Maven para compilar la aplicación
FROM maven:3.8.4-amazoncorretto-11 as builder

# Establecemos el directorio de trabajo dentro del contenedor
WORKDIR /app

# Copiamos el pom.xml principal y los módulos
COPY pom.xml ./pom.xml

# Copiamos los POMs y src en el orden adecuado
COPY common/pom.xml ./common/pom.xml
COPY common/src ./common/src/

COPY domain/pom.xml ./domain/pom.xml
COPY domain/src ./domain/src/

COPY application/pom.xml ./application/pom.xml
COPY application/src ./application/src/

COPY maria-output-adapter/pom.xml ./maria-output-adapter/pom.xml
COPY maria-output-adapter/src ./maria-output-adapter/src/

COPY mongo-output-adapter/pom.xml ./mongo-output-adapter/pom.xml
COPY mongo-output-adapter/src ./mongo-output-adapter/src/

COPY rest-input-adapter/pom.xml ./rest-input-adapter/pom.xml
COPY rest-input-adapter/src ./rest-input-adapter/src/

COPY cli-input-adapter/pom.xml ./cli-input-adapter/pom.xml
COPY cli-input-adapter/src ./cli-input-adapter/src/

# Ejecutamos mvn clean package para construir el CLI
RUN mvn clean package -DskipTests

# Usamos la imagen de Amazon Corretto para el CLI
FROM amazoncorretto:11

# Creamos un directorio para la aplicación
WORKDIR /app

# Copiamos el archivo .jar generado del CLI
COPY --from=builder /app/cli-input-adapter/target/*.jar cli-app.jar

# El CLI no expone puertos, pero el contenedor es interactivo
ENTRYPOINT ["java", "-jar", "cli-app.jar"]
